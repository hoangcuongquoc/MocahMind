import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../models/playlist_models.dart';
import '../../../service/playlist_service.dart';

class PlaylistController extends GetxController {
  final PlaylistService _playlistService = PlaylistService();

  // Danh s√°ch playlist
  RxList<Playlist> playlists = <Playlist>[].obs;

  // Tr·∫°ng th√°i loading
  RxBool isLoading = false.obs;

  // L·ªói (n·∫øu c√≥)
  RxString errorMessage = ''.obs;

  @override
  void onInit() {
    super.onInit();
    fetchPlaylists();
  }

  /// üîπ L·∫•y danh s√°ch playlists t·ª´ Supabase
  Future<void> fetchPlaylists() async {
    try {
      isLoading.value = true;

      final userId = _playlistService.client.auth.currentUser?.id;
      print('üßæ Supabase user_id hi·ªán t·∫°i: $userId'); // ‚úÖ DEBUG

      final data = await _playlistService.getAllPlaylists();
      playlists.assignAll(data);
      errorMessage.value = '';
    } catch (e) {
      errorMessage.value = 'L·ªói khi t·∫£i playlist: $e';
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> createPlaylist(String name, String description,String imageUrl) async {
    try {
      await _playlistService.createPlaylist(name, description, imageUrl);
      await fetchPlaylists();
    } catch (e) {
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ t·∫°o playlist: $e',
          backgroundColor: Colors.red, colorText: Colors.white);
    }
  }

  /// üîπ Reload th·ªß c√¥ng (cho pull-to-refresh)
  Future<void> reload() => fetchPlaylists();

  /// üîπ Th√™m b√†i h√°t v√†o playlist (append songId v√†o song_ids[])
  Future<void> addSongToPlaylist(int playlistId, String songId) async {
    try {
      await _playlistService.addSongToPlaylist(playlistId, songId);
      await fetchPlaylists(); // refresh ƒë·ªÉ c·∫≠p nh·∫≠t
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'Kh√¥ng th·ªÉ th√™m b√†i h√°t v√†o playlist',
        backgroundColor: Get.theme.colorScheme.errorContainer,
        colorText: Get.theme.colorScheme.onErrorContainer,
      );
    }
  }
  Future<void> updatePlaylist({
    required int id,
    String? name,
    String? description,
    String? imageUrl,
    bool? isPined,
  }) async {
    try {
      await _playlistService.updatePlaylist(
        id: id,
        name: name,
        description: description,
        imageUrl: imageUrl,
        isPined: isPined,
      );
      await fetchPlaylists();
    } catch (e) {
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t playlist: $e',
          backgroundColor: Colors.red, colorText: Colors.white);
    }
  }



  Future<void> deletePlaylist(int id) async {
    try {
      await _playlistService.deletePlaylist(id);
      await fetchPlaylists();
    } catch (e) {
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ xo√° playlist: $e',
          backgroundColor: Colors.red, colorText: Colors.white);
    }
  }

}
